(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var i=t.g.document;if(!e&&i&&(i.currentScript&&"SCRIPT"===i.currentScript.tagName.toUpperCase()&&(e=i.currentScript.src),!e)){var s=i.getElementsByTagName("script");if(s.length)for(var n=s.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=s[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();let e=[],i=[],s=0,n=0,r=0,o=0,h=0;const a=[];function c(){function t(e){if(!e.destroyed){e.update();for(const i of e.children)t(i)}}i=e.filter(t=>t.collideSolidObjects);for(const i of e)if(!i.parent){i.update(),i.updatePhysics();for(const e of i.children)t(e);i.updateTransforms()}e=e.filter(t=>!t.destroyed)}function l(){}function u(){return!1}const d=Math.PI,y=Math.abs,f=Math.floor,g=Math.ceil,p=Math.round,x=Math.min,m=Math.max,v=Math.sign,w=Math.hypot,b=(Math.log2,Math.sin),T=Math.cos,E=(Math.tan,Math.atan2);function S(t,e=1){return(t%e+e)%e}function A(t,e=0,i=1){return t<e?e:t>i?i:t}function R(t,e,i){return(i-=e)?A((t-e)/i):0}function I(t,e,i){return t>=0&&t<=1&&(e<0||e>1)&&(i<0||i>1)&&console.warn("lerp() parameter order changed! use lerp(start, end, p)"),t+A(i)*(e-t)}function z(t,e,i,s=U()){const n=2*(t.x-i.x),r=2*(t.y-i.y),o=e.x+s.x,h=e.y+s.y;return n>=-o&&n<o&&r>=-h&&r<h}function D(t){return"number"==typeof t&&!isNaN(t)}function L(t){return null!=t&&"string"==typeof t.toString()}function _(t=1,e=0){return e+Math.random()*(t-e)}function C(t,e=0){return f(_(t,e))}function G(t=.5){return _()<t}function O(t=1){return(new B).setAngle(_(2*d),t)}function F(t=new V,e=new V(0,0,0,1),i=!1){return i?t.lerp(e,_()):new V(_(t.r,e.r),_(t.g,e.g),_(t.b,e.b),_(t.a,e.a))}function U(t=0,e){return new B(t,void 0===e?t:e)}function W(t){return t instanceof B&&t.isValid()}function P(t){W(t)}function M(t){D(t)}class B{constructor(t=0,e=0){this.x=t,this.y=e,this.isValid()}set(t=0,e=0){return this.x=t,this.y=e,P(this),this}setFrom(t){return this.set(t.x,t.y)}copy(){return new B(this.x,this.y)}add(t){return new B(this.x+t.x,this.y+t.y)}subtract(t){return new B(this.x-t.x,this.y-t.y)}multiply(t){return new B(this.x*t.x,this.y*t.y)}divide(t){return new B(this.x/t.x,this.y/t.y)}scale(t){return new B(this.x*t,this.y*t)}length(){return this.lengthSquared()**.5}lengthSquared(){return this.x**2+this.y**2}distance(t){return this.distanceSquared(t)**.5}distanceSquared(t){return(this.x-t.x)**2+(this.y-t.y)**2}normalize(t=1){const e=this.length();return e?this.scale(t/e):new B(0,t)}clampLength(t=1){const e=this.length();return e>t?this.scale(t/e):this.copy()}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}reflect(t,e=1){return this.subtract(t.scale((1+e)*this.dot(t)))}angle(){return E(this.x,this.y)}setAngle(t=0,e=1){return M(t),M(e),this.x=e*b(t),this.y=e*T(t),this}rotate(t){M(t);const e=T(-t),i=b(-t);return new B(this.x*e-this.y*i,this.x*i+this.y*e)}setDirection(t,e=1){return M(t),M(e),t=S(t,4),this.x=t%2?t-1?-e:e:0,this.y=t%2?0:t?-e:e,this}direction(){return y(this.x)>y(this.y)?this.x<0?3:1:this.y<0?2:0}abs(){return new B(y(this.x),y(this.y))}floor(){return new B(f(this.x),f(this.y))}mod(t=1){return new B(S(this.x,t),S(this.y,t))}area(){return y(this.x*this.y)}isZero(){return!this.x&&!this.y}lerp(t,e){P(t),M(e);const i=A(e);return new B(t.x*i+this.x*(1-i),t.y*i+this.y*(1-i))}arrayCheck(t){return this.x>=0&&this.y>=0&&this.x<t.x&&this.y<t.y}toString(t=3){return M(t),this.isValid()?`(${(this.x<0?"":" ")+this.x.toFixed(t)},${(this.y<0?"":" ")+this.y.toFixed(t)} )`:`(${this.x}, ${this.y})`}isValid(){return D(this.x)&&D(this.y)}}function N(t,e,i,s){return new V(t,e,i,s)}function X(t,e,i,s){return(new V).setHSLA(t,e,i,s)}function j(t){return t instanceof V&&t.isValid()}function k(t){j(t)}class V{constructor(t=1,e=1,i=1,s=1){this.r=t,this.g=e,this.b=i,this.a=s,this.isValid()}set(t=1,e=1,i=1,s=1){return this.r=t,this.g=e,this.b=i,this.a=s,k(this),this}setFrom(t){return this.set(t.r,t.g,t.b,t.a)}copy(){return new V(this.r,this.g,this.b,this.a)}add(t){return new V(this.r+t.r,this.g+t.g,this.b+t.b,this.a+t.a)}subtract(t){return new V(this.r-t.r,this.g-t.g,this.b-t.b,this.a-t.a)}multiply(t){return new V(this.r*t.r,this.g*t.g,this.b*t.b,this.a*t.a)}divide(t){return new V(this.r/t.r,this.g/t.g,this.b/t.b,this.a/t.a)}scale(t,e=t){return new V(this.r*t,this.g*t,this.b*t,this.a*e)}clamp(){return new V(A(this.r),A(this.g),A(this.b),A(this.a))}lerp(t,e){k(t),M(e);const i=A(e);return new V(t.r*i+this.r*(1-i),t.g*i+this.g*(1-i),t.b*i+this.b*(1-i),t.a*i+this.a*(1-i))}setHSLA(t=0,e=0,i=1,s=1){t=S(t,1),e=A(e);const n=(i=A(i))<.5?i*(1+e):i+e-i*e,r=2*i-n,o=(t,e,i)=>6*(i=S(i,1))<1?t+6*(e-t)*i:2*i<1?e:3*i<2?t+(e-t)*(4-6*i):t;return this.r=o(r,n,t+1/3),this.g=o(r,n,t),this.b=o(r,n,t-1/3),this.a=s,k(this),this}HSLA(){const t=A(this.r),e=A(this.g),i=A(this.b),s=A(this.a),n=m(t,e,i),r=x(t,e,i),o=(n+r)/2;let h=0,a=0;if(n!==r){let s=n-r;a=o>.5?s/(2-n-r):s/(n+r),t===n?h=(e-i)/s+(e<i?6:0):e===n?h=(i-t)/s+2:i===n&&(h=(t-e)/s+4)}return[h/6,a,o,s]}mutate(t=.05,e=0){return M(t),M(e),new V(this.r+_(t,-t),this.g+_(t,-t),this.b+_(t,-t),this.a+_(e,-e)).clamp()}toString(t=!0){const e=t=>((t=255*A(t)|0)<16?"0":"")+t.toString(16);return"#"+e(this.r)+e(this.g)+e(this.b)+(t?e(this.a):"")}setHex(t){if(L(t),t[0],[4,5,7,9].includes(t.length),t.length<6){const e=e=>A(parseInt(t[e],16)/15);this.r=e(1),this.g=e(2),this.b=e(3),this.a=5===t.length?e(4):1}else{const e=e=>A(parseInt(t.slice(e,e+2),16)/255);this.r=e(1),this.g=e(3),this.b=e(5),this.a=9===t.length?e(7):1}return k(this),this}rgbaInt(){return(255*A(this.r)|0)+(255*A(this.g)<<8)+(255*A(this.b)<<16)+(255*A(this.a)<<24)}isValid(){return D(this.r)&&D(this.g)&&D(this.b)&&D(this.a)}}const Y=N(),H=(N(1,1,1,0),N(0,0,0)),$=N(0,0,0,0);N(.5,.5,.5),N(1,0,0),N(1,.5,0),N(1,1,0),N(0,1,0),N(0,1,1),N(0,0,1),N(.5,0,1),N(1,0,1);let q,K,J,Z,Q,tt,et,it,st=U(),nt=32,rt=$,ot=U(1920,1080),ht=U(),at=!0,ct=!1,lt=!0,ut=U(16),dt=U(),yt=!1;U(640,80);class ft{constructor(t=U(),i=U(1),s,r=0,o=Y,h=0){W(t),W(i),"number"==typeof r&&isFinite(r),j(o),this.pos=t.copy(),this.size=i.copy(),this.drawSize=void 0,this.tileInfo=s,this.angle=r,this.color=o.copy(),this.additiveColor=void 0,this.mirror=!1,this.mass=1,this.damping=1,this.angleDamping=1,this.restitution=0,this.friction=.8,this.gravityScale=1,this.renderOrder=h,this.velocity=U(),this.angleVelocity=0,this.spawnTime=n,this.children=[],this.clampSpeed=!0,this.groundObject=void 0,this.parent=void 0,this.localPos=U(),this.localAngle=0,this.collideTiles=!1,this.collideSolidObjects=!1,this.isSolid=!1,this.collideRaycast=!1,e.push(this)}updateTransforms(){const t=this.parent;if(t){const e=t.getMirrorSign();this.pos=this.localPos.multiply(U(e,1)).rotate(t.angle).add(t.pos),this.angle=e*this.localAngle+t.angle}for(const t of this.children)t.updateTransforms()}updatePhysics(){this.parent,this.clampSpeed&&(this.velocity.x=A(this.velocity.x,-1,1),this.velocity.y=A(this.velocity.y,-1,1));const t=this.pos.copy();if(this.velocity.x*=this.damping,this.velocity.y*=this.damping,this.mass&&(this.velocity.x+=dt.x*this.gravityScale,this.velocity.y+=dt.y*this.gravityScale),this.pos.x+=this.velocity.x,this.pos.y+=this.velocity.y,this.angle+=this.angleVelocity*=this.angleDamping,this.angleDamping>=0&&this.angleDamping,this.damping>=0&&this.damping,!this.mass)return;const e=this.velocity.y<0&&dt.y<0||this.velocity.y>0&&dt.y>0;if(this.groundObject){const t=m(this.friction,this.groundObject.friction),e=this.groundObject.velocity?this.groundObject.velocity.x:0;this.velocity.x=e+(this.velocity.x-e)*t,this.groundObject=void 0}if(this.collideSolidObjects){const s=.001;for(const n of i){if(!this.isSolid&&!n.isSolid||n.destroyed||n.parent||n===this)continue;if(!this.isOverlappingObject(n))continue;const i=this.collideWithObject(n),r=n.collideWithObject(this);if(!i||!r)continue;if(z(t,this.size,n.pos,n.size)){const e=t.subtract(n.pos),i=e.length(),s=.001,r=i<.01?O(s):e.scale(s/i);this.velocity=this.velocity.add(r),n.mass&&(n.velocity=n.velocity.subtract(r));continue}const o=this.size.add(n.size),h=2*(t.y-n.pos.y)>o.y+dt.y,a=2*y(t.y-n.pos.y)<o.y,c=2*y(t.x-n.pos.x)<o.x,l=m(this.restitution,n.restitution);if(h||c||!a)if(this.pos.y=n.pos.y+(o.y/2+s)*v(t.y-n.pos.y),n.groundObject&&e||!n.mass)e&&(this.groundObject=n),this.velocity.y*=-l;else if(n.mass){const t=(this.mass*this.velocity.y+n.mass*n.velocity.y)/(this.mass+n.mass),e=this.velocity.y*(this.mass-n.mass)/(this.mass+n.mass)+2*n.velocity.y*n.mass/(this.mass+n.mass),i=n.velocity.y*(n.mass-this.mass)/(this.mass+n.mass)+2*this.velocity.y*this.mass/(this.mass+n.mass);this.velocity.y=I(t,e,l),n.velocity.y=I(t,i,l)}if(!h&&a)if(this.pos.x=n.pos.x+(o.x/2+s)*v(t.x-n.pos.x),n.mass){const t=(this.mass*this.velocity.x+n.mass*n.velocity.x)/(this.mass+n.mass),e=this.velocity.x*(this.mass-n.mass)/(this.mass+n.mass)+2*n.velocity.x*n.mass/(this.mass+n.mass),i=n.velocity.x*(n.mass-this.mass)/(this.mass+n.mass)+2*this.velocity.x*this.mass/(this.mass+n.mass);this.velocity.x=I(t,e,l),n.velocity.x=I(t,i,l)}else this.velocity.x*=-l}}if(this.collideTiles){const i=$t(this.pos,this.size,this);if(i&&!$t(t,this.size,this)){const s=$t(U(t.x,this.pos.y),this.size,this),n=$t(U(this.pos.x,t.y),this.size,this);if(n){const e=.001,i=.1,s=f(t.y-this.size.y/2+1)+this.size.y/2+e;if(s-this.pos.y<i&&!$t(U(this.pos.x,s),this.size,this))return void(this.pos.y=s);this.pos.x=t.x,this.velocity.x*=-this.restitution}if(s||!n){const s=m(this.restitution,i.restitution);if(this.velocity.y*=-s,e){const e=1e-4,s=this.size.y/2+e;this.pos.y=dt.y<0?f(t.y-this.size.y/2)+s:g(t.y+this.size.y/2)-s,this.groundObject=i}else this.pos.y=t.y,this.groundObject=void 0}}}}update(){}render(){bt(this.pos,this.drawSize||this.size,this.tileInfo,this.color,this.angle,this.mirror,this.additiveColor)}destroy(){if(!this.destroyed){this.destroyed=1,this.parent&&this.parent.removeChild(this);for(const t of this.children)t.parent=0,t.destroy()}}localToWorld(t){return this.pos.add(t.rotate(this.angle))}worldToLocal(t){return t.subtract(this.pos).rotate(-this.angle)}localToWorldVector(t){return t.rotate(this.angle)}worldToLocalVector(t){return t.rotate(-this.angle)}collideWithTile(t,e){return t>0}collideWithObject(t){return!0}getUp(t=1){return U().setAngle(this.angle,t)}getRight(t=1){return U().setAngle(this.angle+d/2,t)}getAliveTime(){return n-this.spawnTime}getSpeed(){return this.velocity.length()}applyAcceleration(t){this.mass&&(this.velocity=this.velocity.add(t))}applyAngularAcceleration(t){this.mass&&(this.angleVelocity+=t)}applyForce(t){this.mass&&this.applyAcceleration(t.scale(1/this.mass))}getMirrorSign(){return this.mirror?-1:1}addChild(t,e=U(),i=0){!t.parent&&this.children.includes(t),this.children.push(t),t.parent=this,t.localPos=e.copy(),t.localAngle=i}removeChild(t){t.parent===this&&this.children.includes(t);const e=this.children.indexOf(t);e>=0&&this.children.splice(e,1),t.parent=0}isOverlappingObject(t){return this.isOverlapping(t.pos,t.size)}isOverlapping(t,e=U()){return z(this.pos,this.size,t,e)}setCollision(t=!0,e=!0,i=!0,s=!0){this.collideSolidObjects=t,this.isSolid=e,this.collideTiles=i,this.collideRaycast=s}toString(){}renderDebugInfo(){}}let gt,pt=U(),xt=[];function mt(t=new B,e=ut,i=0,s=0){"number"==typeof e&&(e=new B(e,e));const n=new vt(new B,e,i,s),r=xt[i],o=e.x+2*s,h=e.y+2*s;if("number"==typeof t){const e=r.size.x/o|0,i=t%e,a=t/e|0;n.pos.set(i*o+s,a*h+s)}else n.pos.set(t.x*o+s,t.y*h+s);return n}class vt{constructor(t=U(),e=ut,i=0,s=0,n=0){this.pos=t.copy(),this.size=e.copy(),this.textureIndex=i,this.padding=s,this.textureInfo=xt[this.textureIndex],this.bleedScale=n}offset(t){return new vt(this.pos.add(t),this.size,this.textureIndex,this.padding,this.bleedScale)}frame(t){return this.offset(new B(t*(this.size.x+2*this.padding),0))}setFullImage(t){return this.pos=new B,this.size=t.size.copy(),this.textureInfo=t,this.bleedScale=this.padding=0,this}}class wt{constructor(t,e=!0){this.image=t,this.size=t?U(t.width,t.height):U(),this.sizeInverse=t?U(1/t.width,1/t.height):U(),this.glTexture=void 0,e&&this.createWebGLTexture()}createWebGLTexture(){var t;t=this,de.add(t),te&&(t.glTexture?Se(t.glTexture,t.image):t.glTexture=Ee(t.image))}destroyWebGLTexture(){!function(t){de.delete(t);const e=t.glTexture;var i;t.glTexture=void 0,i=e,te&&te.deleteTexture(i)}(this)}hasWebGL(){return!!this.glTexture}}function bt(t,e=new B(1),i,s=Y,n=0,r,o,h=lt,a,c){W(t),W(e),j(s),D(n),!o||j(o);const l=i&&i.textureInfo,u=i?i.bleedScale:0;if(h&&lt)if(a&&([t,e,n]=function(t,e,i=0){return[Tt(t),e.scale(1/nt),i+0]}(t,e,n)),l){const h=l.sizeInverse,a=i.pos.x*h.x,c=i.pos.y*h.y,d=i.size.x*h.x,y=i.size.y*h.y;if(function(t,e=!1){if(!te||t===oe)return;Ae(),oe=t,te.bindTexture(te.TEXTURE_2D,oe);const i=e?te.REPEAT:te.CLAMP_TO_EDGE;te.texParameteri(te.TEXTURE_2D,te.TEXTURE_WRAP_S,i),te.texParameteri(te.TEXTURE_2D,te.TEXTURE_WRAP_T,i)}(l.glTexture),u){const i=h.x*u,l=h.y*u;Re(t.x,t.y,r?-e.x:e.x,e.y,n,a+i,c+l,a-i+d,c-l+y,s.rgbaInt(),o&&o.rgbaInt())}else Re(t.x,t.y,r?-e.x:e.x,e.y,n,a,c,a+d,c+y,s.rgbaInt(),o&&o.rgbaInt())}else Re(t.x,t.y,e.x,e.y,n,0,0,0,0,0,s.rgbaInt());else++gt,function(t,e,i=0,s=!1,n,r=!1,o=tt){W(t),W(e),D(i),r||([t,e,i]=function(t,e,i=0){return[Et(t),e.scale(nt),i-0]}(t,e,i)),o.save(),o.translate(t.x+.5,t.y+.5),o.rotate(i),o.scale(s?-e.x:e.x,-e.y),n(o),o.restore()}(t,e=new B(e.x,-e.y),n,r,t=>{if(l){const e=i.pos.x,n=i.pos.y,r=i.size.x,h=i.size.y;!function(t,e,i,s,n,r,o,h,a,c,l,u,d=0){function y(t){return t.r>=1&&t.g>=1&&t.b>=1}const f=d,g=d,p=(n=m(1,0|n))-2*d,x=(r=m(1,0|r))-2*d;if(u?y(l.add(u))&&u.a<=0:y(l))t.globalAlpha=l.a,t.drawImage(e,i+f,s+g,p,x,o,h,a,c),t.globalAlpha=1;else{et.width=n,et.height=r,it.drawImage(e,0|i,0|s,n,r,0,0,n,r);const d=it.getImageData(0,0,n,r),y=d.data;if(!u||(v=u).r<=0&&v.g<=0&&v.b<=0&&v.a<=0){for(let t=0;t<y.length;t+=4)y[t]*=l.r,y[t+1]*=l.g,y[t+2]*=l.b;it.putImageData(d,0,0),t.globalAlpha=l.a,t.drawImage(et,f,g,p,x,o,h,a,c),t.globalAlpha=1}else{const e=[l.r,l.g,l.b,l.a],i=[255*u.r,255*u.g,255*u.b,255*u.a];for(let t=0;t<y.length;++t)y[t]=y[t]*e[3&t]+i[3&t]|0;it.putImageData(d,0,0),t.drawImage(et,f,g,p,x,o,h,a,c)}}var v}(t,l.image,e,n,r,h,-.5,-.5,1,1,s,o,u)}else{const e=o?s.add(o):s;t.fillStyle=e.toString(),t.fillRect(-.5,-.5,1,1)}},a,c)}function Tt(t){let e=(t.x-pt.x/2+.5)/nt,i=(t.y-pt.y/2+.5)/-nt;return new B(e+st.x,i+st.y)}function Et(t){let e=t.x-st.x,i=t.y-st.y;return new B(e*nt+pt.x/2-.5,i*-nt+pt.y/2-.5)}let St=U(),At=U(),Rt=U(),It=U(),zt=0,Dt=!0,Lt=!1,_t=0;function Ct(){Ut.length=0,Ut[0]=[],Bt.length=0,Nt.length=0,Wt.length=0,Pt.length=0}function Gt(t,e=0){return L(t),!!(1&Ut[e]?.[t])}function Ot(t,e=_t){return D(t),D(e),Gt(t,e+1)}const Ft=void 0!==window.ontouchstart,Ut=[[]],Wt=[],Pt=[],Mt=[],Bt=(new class{constructor(t,e=!1){void 0===t||D(t),this.useRealTime=e;const i=this.getGlobalTime();this.time=void 0===t?void 0:i+t,this.setTime=t}set(t=0){D(t);const e=this.getGlobalTime();this.time=e+t,this.setTime=t}setUseRealTime(t=!0){this.isSet(),this.useRealTime=t}unset(){this.time=void 0}isSet(){return void 0!==this.time}active(){return this.getGlobalTime()<this.time}elapsed(){return this.getGlobalTime()>=this.time}get(){return this.isSet()?this.getGlobalTime()-this.time:0}getPercent(){return this.isSet()?1-R(this.time-this.getGlobalTime(),0,this.setTime):0}getSetTime(){return this.isSet()?this.setTime:0}getGlobalTime(){return this.useRealTime?r:n}toString(){return this.isSet()?y(this.get())+" seconds "+(this.get()<0?"before":"after"):"unset"}valueOf(){return this.get()}},[]),Nt=[];function Xt(){Ft||document.hasFocus()||Ct(),St=Tt(At),Rt=function(t){let e=t.x/nt,i=t.y/-nt;return new B(e,i)}(It),function(){const t=t=>{const e=t=>t>.3?R(t,.3,.8):t<-.3?-R(-t,.3,.8):0;return U(e(t.x),e(-t.y)).clampLength()};if(!navigator||!navigator.getGamepads)return;if(!document.hasFocus())return;const e=navigator.getGamepads(),i=x(8,e.length);for(let s=0;s<i;++s){const i=e[s];if(!i){Ut[s+1]=void 0,Wt[s]=void 0,Pt[s]=void 0,Mt[s]=void 0;continue}const n=Ut[s+1]??(Ut[s+1]=[]),r=Wt[s]??(Wt[s]=[]),o=Pt[s]??(Pt[s]=U());for(let e=0;e<i.axes.length-1;e+=2)r[e>>1]=t(U(i.axes[e],i.axes[e+1]));let h=!1;for(let t=i.buttons.length;t--;){const e=i.buttons[t],r=Ot(t,s);n[t]=e.pressed?r?1:3:r?4:0,e.pressed&&(!e.value||e.value>.9)&&(h=!0)}if(h&&(Mt[s]=!0,Mt[_t]||(_t=s),Lt||=_t===s),"standard"===i.mapping)o.set((Ot(15,s)&&1)-(Ot(14,s)&&1),(Ot(12,s)&&1)-(Ot(13,s)&&1));else if(i.axes&&i.axes.length>=2){const t=A(p(i.axes[0]),-1,1),e=A(p(i.axes[1]),-1,1);o.set(t,-e)}!o.isZero()&&(r[0]=o.clampLength())}}()}function jt(){for(const t of Ut)for(const e in t)t[e]&=1;zt=0,Rt=U(),It=U()}let kt,Vt=new AudioContext;function Yt(){return"running"===Vt.state}const Ht=[];function $t(t,e=U(),i,s=!0){for(const n of Ht)if((!s||n.isSolid)&&n.collisionTest(t,e,i))return n}class qt{constructor(t,e=0,i=!1,s=new V){this.tile=t,this.direction=e,this.mirror=i,this.color=s.copy()}clear(){this.tile=this.direction=0,this.mirror=!1,this.color=new V}}class Kt extends ft{constructor(t,e,i=0,s=0,n=U(512)){W(n),super(t,e,void 0,i,Y,s),this.canvas=new OffscreenCanvas(n.x,n.y),this.context=this.canvas?.getContext("2d"),this.textureInfo=new wt(this.canvas,!1),this.refreshWebGL=!1,this.mass=this.gravityScale=this.friction=this.restitution=0}destroy(){this.destroyed||(this.textureInfo.destroyWebGLTexture(),super.destroy())}render(){this.draw(this.pos,this.size,this.angle,this.color,this.mirror,this.additiveColor)}draw(t,e,i=0,s=Y,n=!1,r,o=!1,h){const a=lt&&this.textureInfo.hasWebGL();a&&this.refreshWebGL&&(this.textureInfo.createWebGLTexture(),this.refreshWebGL=!1),bt(t,e,(new vt).setFullImage(this.textureInfo),s,i,n,r,a,o,h)}drawCanvas2D(t,e,i,s,n){if(!this.context)return;const r=this.context;r.save(),t=t.subtract(this.pos).multiply(this.tileInfo.size),e=e.multiply(this.tileInfo.size),r.translate(t.x,this.canvas.height-t.y),r.rotate(i),r.scale(s?-e.x:e.x,e.y),n(r),r.restore()}drawTile(t,e=U(1),i,s=new V,n,r){this.drawCanvas2D(t,e,n,r,t=>{const e=i&&i.textureInfo;e?(t.globalAlpha=s.a,t.drawImage(e.image,i.pos.x,i.pos.y,i.size.x,i.size.y,-.5,-.5,1,1),t.globalAlpha=1):(t.fillStyle=s.toString(),t.fillRect(-.5,-.5,1,1))})}drawRect(t,e,i,s){this.drawTile(t,e,void 0,i,s)}useWebGL(t=!0,e=!1){!e&&t&&this.textureInfo.hasWebGL()?this.refreshWebGL=!0:t?this.textureInfo.createWebGLTexture():this.textureInfo.destroyWebGLTexture()}}class Jt extends Kt{constructor(t,e,i=mt(),s=0){const n=i?e.multiply(i.size):e;super(t,e,0,s,n),this.tileInfo=i,this.data=[];for(let t=this.size.area();t--;)this.data.push(new qt)}setData(t,e,i=!1){W(t),t.arrayCheck(this.size)&&(this.data[(0|t.y)*this.size.x+t.x|0]=e,i&&this.drawTileData(t))}getData(t){return W(t),t.arrayCheck(this.size)&&this.data[(0|t.y)*this.size.x+t.x|0]}render(){this.context,this.refreshWebGL&&(this.textureInfo.createWebGLTexture(),this.refreshWebGL=!1);const t=(new vt).setFullImage(this.textureInfo),e=this.drawSize||this.size,i=this.pos.add(e.scale(.5)),s=lt&&this.textureInfo.hasWebGL();bt(i,e,t,Y,0,!1,$,s)}redraw(){this.redrawStart(!0);for(let t=this.size.x;t--;)for(let e=this.size.y;e--;)this.drawTileData(U(t,e),!1);this.redrawEnd(),this.useWebGL()}redrawStart(t=!1){if(!this.context)return;this.savedRenderSettings=[Q,tt,pt,st,nt],Q=this.canvas,tt=this.context,st=this.size.scale(.5);const e=this.tileInfo?this.tileInfo.size:U(1);nt=e.x,pt=this.size.multiply(e),t&&(Q.width=pt.x,Q.height=pt.y),this.context.imageSmoothingEnabled=!1,we()}redrawEnd(){var t;this.context&&(this.context,t=tt,lt&&te&&(Ae(),t.drawImage(Qt,0,0)),[Q,tt,pt,st,nt]=this.savedRenderSettings)}drawTileData(t,e=!0){if(!this.context)return;const i=this.tileInfo.size;if(e){const e=t.multiply(i);this.context.clearRect(e.x,this.canvas.height-e.y,i.x,-i.y)}const s=this.getData(t);if(void 0!==s.tile){this.context;const e=t.add(U(.5)),n=mt(s.tile,i,this.tileInfo.textureIndex,this.tileInfo.padding);bt(e,U(1),n,s.color,s.direction*d/2,s.mirror)}}}class Zt extends Jt{constructor(t,e,i=mt(),s=0){super(t,e.floor(),i,s),this.collisionData=[],this.initCollision(this.size),Ht.push(this),this.isSolid=!0}destroy(){if(this.destroyed)return;const t=Ht.indexOf(this);t>=0&&Ht.splice(t,1),super.destroy()}initCollision(t){W(t),this.size=t.floor(),this.collisionData=[],this.collisionData.length=t.area(),this.collisionData.fill(0)}setCollisionData(t,e=1){W(t);const i=(0|t.y)*this.size.x+t.x|0;t.arrayCheck(this.size)&&(this.collisionData[i]=e)}getCollisionData(t){W(t);const e=(0|t.y)*this.size.x+t.x|0;return t.arrayCheck(this.size)?this.collisionData[e]:0}collisionTest(t,e=new B,i){W(t)&&W(e);const s=t.x-this.pos.x,n=t.y-this.pos.y,r=m(s-e.x/2|0,0),o=m(n-e.y/2|0,0),h=x(s+e.x/2,this.size.x),a=x(n+e.y/2,this.size.y),c=new B;for(let t=o;t<a;++t)for(let e=r;e<h;++e){const s=this.collisionData[t*this.size.x+e];if(s&&(!i||i.collideWithTile(s,c.set(e+this.pos.x,t+this.pos.y))))return!0}return!1}collisionRaycast(t,e,i,s){W(t)&&W(e);const n=new B,r=function(t,e,i,s){W(t),W(e),!s||W(s);const n=e.x-t.x,r=e.y-t.y,o=w(n,r);if(!o)return;const h=t.floor(),a=n/o,c=r/o,l=v(a),u=v(c),d=a?y(1/a):1/0,f=c?y(1/c):1/0,g=l>0?h.x+1:h.x,p=u>0?h.y+1:h.y;let x=0,m=a?(g-t.x)/a:1/0,b=c?(p-t.y)/c:1/0,T=d<f;for(;x<o;){if(i(h)){const e=U(t.x+a*x,t.y+c*x),i=1e-9;return T&&l<0&&(e.x-=i),u<0&&(e.y-=i),s&&(T?s.set(-l,0):s.set(0,-u)),e}(T=m<b)?(h.x+=l,x=m,m+=d):(h.y+=u,x=b,b+=f)}}(t,e,t=>{n.set(t.x-this.pos.x,t.y-this.pos.y);const e=this.getCollisionData(n);return e&&(!i||i.collideWithTile(e,t))},s);if(r)return r.floor().add(U(.5)),r}}let Qt,te,ee,ie,se,ne,re,oe,he,ae,ce,le,ue,de,ye=!0;const fe=5e5,ge=11,pe=4*ge,xe=fe/pe|0,me=3;function ve(){if(!se)return;Ae(),se=!1,te.useProgram(ee);let t=0;const e=(e,i,s,n)=>{const r=te.getAttribLocation(ee,e),o=s&&pe,h=s&&1,a=1===s;te.enableVertexAttribArray(r),te.vertexAttribPointer(r,n,i,a,o,t),te.vertexAttribDivisor(r,h),t+=n*s};te.bindBuffer(te.ARRAY_BUFFER,ae),e("g",te.FLOAT,0,2),te.bindBuffer(te.ARRAY_BUFFER,he),te.bufferData(te.ARRAY_BUFFER,fe,te.DYNAMIC_DRAW),e("p",te.FLOAT,4,4),e("u",te.FLOAT,4,4),e("c",te.UNSIGNED_BYTE,1,4),e("a",te.UNSIGNED_BYTE,1,4),e("r",te.FLOAT,4,1)}function we(){if(!lt||!te)return;te&&(Qt.width=Q.width,Qt.height=Q.height,te.viewport(0,0,Qt.width,Qt.height),te.clear(te.COLOR_BUFFER_BIT));const t=U(2*nt).divide(pt),e=st.rotate(-0),i=U(-1).subtract(e.multiply(t)),s=T(0),n=b(0),r=[t.x*s,t.y*n,0,0,-t.x*n,t.y*s,0,0,1,1,1,0,i.x,i.y,0,1],o=(t,e,i)=>{te.useProgram(t);const s=te.getUniformLocation(t,e);te.uniformMatrix4fv(s,!1,i)};o(ie,"m",r),o(ee,"m",r),te.activeTexture(te.TEXTURE0),xt[0]&&(oe=xt[0].glTexture,te.bindTexture(te.TEXTURE_2D,oe)),ne=re=!1,se=!0,ve()}function be(t,e){if(!te)return;const i=te.createShader(e);return te.shaderSource(i,t),te.compileShader(i),i}function Te(t,e){if(!te)return;const i=te.createProgram();return te.attachShader(i,be(t,te.VERTEX_SHADER)),te.attachShader(i,be(e,te.FRAGMENT_SHADER)),te.linkProgram(i),i}function Ee(t){if(!te)return;const e=te.createTexture();let i=!1;if(t&&t.width)Se(e,t),te.bindTexture(te.TEXTURE_2D,e),i=!1;else{const t=new Uint8Array([255,255,255,255]);te.bindTexture(te.TEXTURE_2D,e),te.texImage2D(te.TEXTURE_2D,0,te.RGBA,1,1,0,te.RGBA,te.UNSIGNED_BYTE,t)}const s=te.NEAREST,n=i?te.LINEAR_MIPMAP_LINEAR:s;return te.texParameteri(te.TEXTURE_2D,te.TEXTURE_MAG_FILTER,s),te.texParameteri(te.TEXTURE_2D,te.TEXTURE_MIN_FILTER,n),i&&te.generateMipmap(te.TEXTURE_2D),te.bindTexture(te.TEXTURE_2D,oe),e}function Se(t,e){te&&(!!e&&e.width,te.bindTexture(te.TEXTURE_2D,t),te.texImage2D(te.TEXTURE_2D,0,te.RGBA,te.RGBA,te.UNSIGNED_BYTE,e),te.bindTexture(te.TEXTURE_2D,oe))}function Ae(){if(lt&&te&&ue){const t=re?te.ONE:te.ONE_MINUS_SRC_ALPHA;te.blendFuncSeparate(te.SRC_ALPHA,t,te.ONE,t),te.enable(te.BLEND);const e=ue*(se?me:ge);te.bufferSubData(te.ARRAY_BUFFER,0,ce,0,e),se?te.drawArrays(te.TRIANGLE_STRIP,0,ue):te.drawArraysInstanced(te.TRIANGLE_STRIP,0,4,ue),gt+=ue,ue=0}re=ne}function Re(t,e,i,s,n=0,r=0,o=0,h=1,a=1,c=-1,l=0){(ue>=xe||re!==ne)&&Ae(),ve(),se=!1;let u=ue++*ge;ce[u++]=t,ce[u++]=e,ce[u++]=i,ce[u++]=s,ce[u++]=r,ce[u++]=o,ce[u++]=h,ce[u++]=a,le[u++]=c,le[u++]=l,ce[u++]=n}const Ie=t.p+"dd86900654d3d0204ed7.png";class ze{constructor(t,e,i=2,s=U(0,0)){this.tileId=t,this.position=s,this.tileSize=e,this.scale=i}move(t){this.position=this.position.add(t)}render(t=this.scale){bt(this.position,t,mt(this.tileId,this.tileSize))}}const De=new class{constructor(t,e,i,s,n,r=0,o=0){this.width=t,this.height=e,this.tileSize=i,this.scale=s,this.tiles=n,this.tilesColumns=r,this.tilesRow=o,this.player=null}init(){var t,e;this.gameSize=U(this.width,this.height),t=this.gameSize,ht=t.copy(),function(t){ot=t.copy()}(this.gameSize),this.size=U(this.width/this.tileSize,this.height/this.tileSize),this.center=U(this.size.x/2,this.size.y/2),e=this.center,st=e.copy(),nt=this.tileSize,this.player=new ze(42,this.tileSize,this.scale,this.center)}update(){this.handleInput()}render(){this.player.render()}handleInput(){this.player.move(function(t="ArrowUp",e="ArrowDown",i="ArrowLeft",s="ArrowRight"){L(t),L(e),L(i),L(s);const n=t=>Gt(t)?1:0;return U(n(s)-n(i),n(t)-n(e))}())}}(800,600,8,U(2),[Ie],13,11);!async function(t,i,d,y,f,g=[],p=document.body){function m(t=0){let g=t-o;o=t;r+=g/1e3,h+=g,h=x(h,50);let p=!1;{let t=0;for(h<0&&h>-9&&(t=h,h=0);h>=0;h-=1e3/60)n=s++/60,p=!0,w(),Xt(),i(),a.forEach(t=>t.update?.()),c(),l(),d(),jt(),u()&&v();h+=t}function v(){p||w(),pt=U(q.width,q.height),Z.imageSmoothingEnabled=K.imageSmoothingEnabled=!1,we(),y(),e.sort((t,e)=>t.renderOrder-e.renderOrder);for(const t of e)t.destroyed||t.render();f(),a.forEach(t=>t.render?.()),Ae(),gt=0}v(),requestAnimationFrame(m)}function w(){if(ht.x){q.width=ht.x,q.height=ht.y;const t=innerWidth/innerHeight,e=q.width/q.height;(Qt||q).style.width=q.style.width=J.style.width=t<e?"100%":"",(Qt||q).style.height=q.style.height=J.style.height=t<e?"":"100%"}else q.width=x(innerWidth,ot.x),q.height=x(innerHeight,ot.y);rt.a>0&&(K.fillStyle=rt.toString(),K.fillRect(0,0,pt.x,pt.y),K.fillStyle=H.toString()),J.width=q.width,J.height=q.height,pt=U(q.width,q.height),K.lineJoin=Z.lineJoin="round",K.lineCap=Z.lineCap="round"}async function b(){await t(),m()}var T;T=g,Array.isArray(T),t||=()=>{},i||=()=>{},d||=()=>{},y||=()=>{},f||=()=>{},p.style.cssText="margin:0;overflow:hidden;background:#000;user-select:none;-webkit-user-select:none;touch-action:none;-webkit-touch-callout:none",Q=q=document.createElement("canvas"),p.appendChild(q),tt=K=q.getContext("2d"),function(){function t(t){return"KeyW"===t?"ArrowUp":"KeyS"===t?"ArrowDown":"KeyA"===t?"ArrowLeft":"KeyD"===t?"ArrowRight":t}function e(t){const e=q.getBoundingClientRect(),i=R(t.x,e.left,e.right),s=R(t.y,e.top,e.bottom);return U(i*q.width,s*q.height)}document.addEventListener("keydown",function(e){e.repeat||(Lt=!1,Ut[0][e.code]=3,Ut[0][t(e.code)]=3),["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space","Tab","Backspace"].includes(e.code)&&document.hasFocus()&&e.cancelable&&e.preventDefault()}),document.addEventListener("keyup",function(e){Ut[0][e.code]=2&Ut[0][e.code]|4,Ut[0][t(e.code)]=4}),document.addEventListener("mousedown",function(t){if(Ft)return;Vt&&!Yt()&&Vt.resume(),Lt=!1,Ut[0][t.button]=3;const i=At;At=e(U(t.x,t.y)),It=It.add(At.subtract(i)),document.hasFocus()&&t.cancelable&&t.preventDefault()}),document.addEventListener("mouseup",function(t){Ft||(Ut[0][t.button]=2&Ut[0][t.button]|4)}),document.addEventListener("mousemove",function(t){Dt=!0;const i=At;At=e(U(t.x,t.y));const s=document.pointerLockElement===q?U(t.movementX,t.movementY):At.subtract(i);It=It.add(s)}),document.addEventListener("mouseleave",function(){Dt=!1}),document.addEventListener("wheel",function(t){zt=t.ctrlKey?0:v(t.deltaY)}),document.addEventListener("contextmenu",function(t){t.preventDefault()}),document.addEventListener("blur",function(){Ct()}),Ft&&function(){let t;function i(i){Vt&&!Yt()&&Vt.resume();const s=i.touches.length;if(s){const s=U(i.touches[0].clientX,i.touches[0].clientY),n=At;At=e(s),t?(It=It.add(At.subtract(n)),Lt=yt):Ut[0][0]=3}else t&&(Ut[0][0]=2&Ut[0][0]|4);return t=s,document.hasFocus()&&i.cancelable&&i.preventDefault(),!0}document.addEventListener("touchstart",t=>i(t),{passive:!1}),document.addEventListener("touchmove",t=>i(t),{passive:!1}),document.addEventListener("touchend",t=>i(t),{passive:!1})}()}(),kt=Vt.createGain(),kt.connect(Vt.destination),kt.gain.value=.3,function(){if(de=new Set,!lt)return void(ye=!1);if(Qt=document.createElement("canvas"),te=Qt.getContext("webgl2",{antialias:true}),!te)return console.warn("WebGL2 not supported, falling back to 2D canvas rendering!"),Qt=te=void 0,lt=!1,void(ye=!1);function t(){ee=Te("#version 300 es\nprecision highp float;uniform mat4 m;in vec2 g;in vec4 p,u,c,a;in float r;out vec2 v;out vec4 d,e;void main(){vec2 s=(g-.5)*p.zw;gl_Position=m*vec4(p.xy+s*cos(r)-vec2(-s.y,s)*sin(r),1,1);v=mix(u.xw,u.zy,g);d=c;e=a;}","#version 300 es\nprecision highp float;uniform sampler2D s;in vec2 v;in vec4 d,e;out vec4 c;void main(){c=texture(s,v)*d+e;}"),ie=Te("#version 300 es\nprecision highp float;uniform mat4 m;in vec2 p;in vec4 c;out vec4 d;void main(){gl_Position=m*vec4(p,1,1);d=c;}","#version 300 es\nprecision highp float;in vec4 d;out vec4 c;void main(){c=d;}");const t=new ArrayBuffer(fe);ce=new Float32Array(t),le=new Uint32Array(t),he=te.createBuffer(),ae=te.createBuffer();const e=new Float32Array([ue=0,0,1,0,0,1,1,1]);te.bindBuffer(te.ARRAY_BUFFER,ae),te.bufferData(te.ARRAY_BUFFER,e,te.STATIC_DRAW)}q.parentElement.appendChild(Qt),t(),Qt.addEventListener("webglcontextlost",t=>{lt=!1,Qt.style.display="none",t.preventDefault();for(const t of de)t.glTexture=void 0;oe=void 0,a.forEach(t=>t.glContextLost?.())}),Qt.addEventListener("webglcontextrestored",()=>{lt=!0,Qt.style.display="",t();for(const t of de)t.glTexture=Ee(t.image);a.forEach(t=>t.glContextRestored?.())})}(),J=document.createElement("canvas"),p.appendChild(J),Z=J.getContext("2d");const E="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)";var S;q.style.cssText=J.style.cssText=E,Qt&&(Qt.style.cssText=E),function(t){at=t,q&&(q.style.imageRendering=t?"pixelated":""),Qt&&(Qt.style.imageRendering=t?"pixelated":"")}(at),ct=S=ct,J&&(J.style.imageRendering=S?"pixelated":""),w(),we(),et=new OffscreenCanvas(256,256),it=et.getContext("2d",{willReadFrequently:!0});const A=g.map((t,e)=>new Promise(i=>{L(t);const s=new Image;s.onerror=s.onload=()=>{const t=new wt(s);xt[e]=t,i()},s.crossOrigin="anonymous",s.src=t}));g.length||A.push(new Promise(t=>{const e=new wt(new Image);xt[0]=e,t()})),await Promise.all(A),b()}(function(){De.init();const t=U(),e=new Zt(t,De.size);for(t.x=e.size.x;t.x--;)for(t.y=e.size.y;t.y--;){if(G(.7))continue;const i=42,s=C(4),n=G(),r=F(Y,X(0,0,.2)),o=new qt(i,s,n,r);e.setData(t,o),e.setCollisionData(t)}e.redraw()},function(){De.update()},function(){},function(){De.render()},function(){},De.tiles)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,