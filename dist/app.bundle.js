(()=>{"use strict";var t={};t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var i=t.g.document;if(!e&&i&&(i.currentScript&&"SCRIPT"===i.currentScript.tagName.toUpperCase()&&(e=i.currentScript.src),!e)){var s=i.getElementsByTagName("script");if(s.length)for(var n=s.length-1;n>-1&&(!e||!/^http(s?):/.test(e));)e=s[n--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})();let e=[],i=[],s=0,n=0,r=0,o=0,h=0;const a=[];function c(){function t(e){if(!e.destroyed){e.update();for(const i of e.children)t(i)}}i=e.filter(t=>t.collideSolidObjects);for(const i of e)if(!i.parent){i.update(),i.updatePhysics();for(const e of i.children)t(e);i.updateTransforms()}e=e.filter(t=>!t.destroyed)}function l(){}function u(){return!1}const d=Math.PI,y=Math.abs,f=Math.floor,g=Math.ceil,p=Math.round,m=Math.min,x=Math.max,v=Math.sign,b=Math.hypot,w=(Math.log2,Math.sin),T=Math.cos,E=(Math.tan,Math.atan2);function S(t,e=1){return(t%e+e)%e}function R(t,e=0,i=1){return t<e?e:t>i?i:t}function A(t,e,i){return(i-=e)?R((t-e)/i):0}function L(t,e,i){return t>=0&&t<=1&&(e<0||e>1)&&(i<0||i>1)&&console.warn("lerp() parameter order changed! use lerp(start, end, p)"),t+R(i)*(e-t)}function z(t,e,i,s=G()){const n=2*(t.x-i.x),r=2*(t.y-i.y),o=e.x+s.x,h=e.y+s.y;return n>=-o&&n<o&&r>=-h&&r<h}function I(t){return"number"==typeof t&&!isNaN(t)}function D(t){return null!=t&&"string"==typeof t.toString()}function C(t=1,e=0){return e+Math.random()*(t-e)}function _(t=1){return(new W).setAngle(C(2*d),t)}function G(t=0,e){return new W(t,void 0===e?t:e)}function O(t){return t instanceof W&&t.isValid()}function F(t){O(t)}function U(t){I(t)}class W{constructor(t=0,e=0){this.x=t,this.y=e,this.isValid()}set(t=0,e=0){return this.x=t,this.y=e,F(this),this}setFrom(t){return this.set(t.x,t.y)}copy(){return new W(this.x,this.y)}add(t){return new W(this.x+t.x,this.y+t.y)}subtract(t){return new W(this.x-t.x,this.y-t.y)}multiply(t){return new W(this.x*t.x,this.y*t.y)}divide(t){return new W(this.x/t.x,this.y/t.y)}scale(t){return new W(this.x*t,this.y*t)}length(){return this.lengthSquared()**.5}lengthSquared(){return this.x**2+this.y**2}distance(t){return this.distanceSquared(t)**.5}distanceSquared(t){return(this.x-t.x)**2+(this.y-t.y)**2}normalize(t=1){const e=this.length();return e?this.scale(t/e):new W(0,t)}clampLength(t=1){const e=this.length();return e>t?this.scale(t/e):this.copy()}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}reflect(t,e=1){return this.subtract(t.scale((1+e)*this.dot(t)))}angle(){return E(this.x,this.y)}setAngle(t=0,e=1){return U(t),U(e),this.x=e*w(t),this.y=e*T(t),this}rotate(t){U(t);const e=T(-t),i=w(-t);return new W(this.x*e-this.y*i,this.x*i+this.y*e)}setDirection(t,e=1){return U(t),U(e),t=S(t,4),this.x=t%2?t-1?-e:e:0,this.y=t%2?0:t?-e:e,this}direction(){return y(this.x)>y(this.y)?this.x<0?3:1:this.y<0?2:0}abs(){return new W(y(this.x),y(this.y))}floor(){return new W(f(this.x),f(this.y))}mod(t=1){return new W(S(this.x,t),S(this.y,t))}area(){return y(this.x*this.y)}isZero(){return!this.x&&!this.y}lerp(t,e){F(t),U(e);const i=R(e);return new W(t.x*i+this.x*(1-i),t.y*i+this.y*(1-i))}arrayCheck(t){return this.x>=0&&this.y>=0&&this.x<t.x&&this.y<t.y}toString(t=3){return U(t),this.isValid()?`(${(this.x<0?"":" ")+this.x.toFixed(t)},${(this.y<0?"":" ")+this.y.toFixed(t)} )`:`(${this.x}, ${this.y})`}isValid(){return I(this.x)&&I(this.y)}}function P(t,e,i,s){return new N(t,e,i,s)}function M(t){return t instanceof N&&t.isValid()}function B(t){M(t)}class N{constructor(t=1,e=1,i=1,s=1){this.r=t,this.g=e,this.b=i,this.a=s,this.isValid()}set(t=1,e=1,i=1,s=1){return this.r=t,this.g=e,this.b=i,this.a=s,B(this),this}setFrom(t){return this.set(t.r,t.g,t.b,t.a)}copy(){return new N(this.r,this.g,this.b,this.a)}add(t){return new N(this.r+t.r,this.g+t.g,this.b+t.b,this.a+t.a)}subtract(t){return new N(this.r-t.r,this.g-t.g,this.b-t.b,this.a-t.a)}multiply(t){return new N(this.r*t.r,this.g*t.g,this.b*t.b,this.a*t.a)}divide(t){return new N(this.r/t.r,this.g/t.g,this.b/t.b,this.a/t.a)}scale(t,e=t){return new N(this.r*t,this.g*t,this.b*t,this.a*e)}clamp(){return new N(R(this.r),R(this.g),R(this.b),R(this.a))}lerp(t,e){B(t),U(e);const i=R(e);return new N(t.r*i+this.r*(1-i),t.g*i+this.g*(1-i),t.b*i+this.b*(1-i),t.a*i+this.a*(1-i))}setHSLA(t=0,e=0,i=1,s=1){t=S(t,1),e=R(e);const n=(i=R(i))<.5?i*(1+e):i+e-i*e,r=2*i-n,o=(t,e,i)=>6*(i=S(i,1))<1?t+6*(e-t)*i:2*i<1?e:3*i<2?t+(e-t)*(4-6*i):t;return this.r=o(r,n,t+1/3),this.g=o(r,n,t),this.b=o(r,n,t-1/3),this.a=s,B(this),this}HSLA(){const t=R(this.r),e=R(this.g),i=R(this.b),s=R(this.a),n=x(t,e,i),r=m(t,e,i),o=(n+r)/2;let h=0,a=0;if(n!==r){let s=n-r;a=o>.5?s/(2-n-r):s/(n+r),t===n?h=(e-i)/s+(e<i?6:0):e===n?h=(i-t)/s+2:i===n&&(h=(t-e)/s+4)}return[h/6,a,o,s]}mutate(t=.05,e=0){return U(t),U(e),new N(this.r+C(t,-t),this.g+C(t,-t),this.b+C(t,-t),this.a+C(e,-e)).clamp()}toString(t=!0){const e=t=>((t=255*R(t)|0)<16?"0":"")+t.toString(16);return"#"+e(this.r)+e(this.g)+e(this.b)+(t?e(this.a):"")}setHex(t){if(D(t),t[0],[4,5,7,9].includes(t.length),t.length<6){const e=e=>R(parseInt(t[e],16)/15);this.r=e(1),this.g=e(2),this.b=e(3),this.a=5===t.length?e(4):1}else{const e=e=>R(parseInt(t.slice(e,e+2),16)/255);this.r=e(1),this.g=e(3),this.b=e(5),this.a=9===t.length?e(7):1}return B(this),this}rgbaInt(){return(255*R(this.r)|0)+(255*R(this.g)<<8)+(255*R(this.b)<<16)+(255*R(this.a)<<24)}isValid(){return I(this.r)&&I(this.g)&&I(this.b)&&I(this.a)}}const X=P(),j=(P(1,1,1,0),P(0,0,0)),k=P(0,0,0,0);P(.5,.5,.5),P(1,0,0),P(1,.5,0),P(1,1,0),P(0,1,0),P(0,1,1),P(0,0,1),P(.5,0,1),P(1,0,1);class Y{constructor(t,e=!1){void 0===t||I(t),this.useRealTime=e;const i=this.getGlobalTime();this.time=void 0===t?void 0:i+t,this.setTime=t}set(t=0){I(t);const e=this.getGlobalTime();this.time=e+t,this.setTime=t}setUseRealTime(t=!0){this.isSet(),this.useRealTime=t}unset(){this.time=void 0}isSet(){return void 0!==this.time}active(){return this.getGlobalTime()<this.time}elapsed(){return this.getGlobalTime()>=this.time}get(){return this.isSet()?this.getGlobalTime()-this.time:0}getPercent(){return this.isSet()?1-A(this.time-this.getGlobalTime(),0,this.setTime):0}getSetTime(){return this.isSet()?this.setTime:0}getGlobalTime(){return this.useRealTime?r:n}toString(){return this.isSet()?y(this.get())+" seconds "+(this.get()<0?"before":"after"):"unset"}valueOf(){return this.get()}}let V,H,$,q,K,J,Z,Q,tt=G(),et=32,it=k,st=G(1920,1080),nt=G(),rt=!0,ot=!1,ht=!0,at=G(16),ct=G(),lt=!1;function ut(t){tt=t.copy()}G(640,80);class dt{constructor(t=G(),i=G(1),s,r=0,o=X,h=0){O(t),O(i),"number"==typeof r&&isFinite(r),M(o),this.pos=t.copy(),this.size=i.copy(),this.drawSize=void 0,this.tileInfo=s,this.angle=r,this.color=o.copy(),this.additiveColor=void 0,this.mirror=!1,this.mass=1,this.damping=1,this.angleDamping=1,this.restitution=0,this.friction=.8,this.gravityScale=1,this.renderOrder=h,this.velocity=G(),this.angleVelocity=0,this.spawnTime=n,this.children=[],this.clampSpeed=!0,this.groundObject=void 0,this.parent=void 0,this.localPos=G(),this.localAngle=0,this.collideTiles=!1,this.collideSolidObjects=!1,this.isSolid=!1,this.collideRaycast=!1,e.push(this)}updateTransforms(){const t=this.parent;if(t){const e=t.getMirrorSign();this.pos=this.localPos.multiply(G(e,1)).rotate(t.angle).add(t.pos),this.angle=e*this.localAngle+t.angle}for(const t of this.children)t.updateTransforms()}updatePhysics(){this.parent,this.clampSpeed&&(this.velocity.x=R(this.velocity.x,-1,1),this.velocity.y=R(this.velocity.y,-1,1));const t=this.pos.copy();if(this.velocity.x*=this.damping,this.velocity.y*=this.damping,this.mass&&(this.velocity.x+=ct.x*this.gravityScale,this.velocity.y+=ct.y*this.gravityScale),this.pos.x+=this.velocity.x,this.pos.y+=this.velocity.y,this.angle+=this.angleVelocity*=this.angleDamping,this.angleDamping>=0&&this.angleDamping,this.damping>=0&&this.damping,!this.mass)return;const e=this.velocity.y<0&&ct.y<0||this.velocity.y>0&&ct.y>0;if(this.groundObject){const t=x(this.friction,this.groundObject.friction),e=this.groundObject.velocity?this.groundObject.velocity.x:0;this.velocity.x=e+(this.velocity.x-e)*t,this.groundObject=void 0}if(this.collideSolidObjects){const s=.001;for(const n of i){if(!this.isSolid&&!n.isSolid||n.destroyed||n.parent||n===this)continue;if(!this.isOverlappingObject(n))continue;const i=this.collideWithObject(n),r=n.collideWithObject(this);if(!i||!r)continue;if(z(t,this.size,n.pos,n.size)){const e=t.subtract(n.pos),i=e.length(),s=.001,r=i<.01?_(s):e.scale(s/i);this.velocity=this.velocity.add(r),n.mass&&(n.velocity=n.velocity.subtract(r));continue}const o=this.size.add(n.size),h=2*(t.y-n.pos.y)>o.y+ct.y,a=2*y(t.y-n.pos.y)<o.y,c=2*y(t.x-n.pos.x)<o.x,l=x(this.restitution,n.restitution);if(h||c||!a)if(this.pos.y=n.pos.y+(o.y/2+s)*v(t.y-n.pos.y),n.groundObject&&e||!n.mass)e&&(this.groundObject=n),this.velocity.y*=-l;else if(n.mass){const t=(this.mass*this.velocity.y+n.mass*n.velocity.y)/(this.mass+n.mass),e=this.velocity.y*(this.mass-n.mass)/(this.mass+n.mass)+2*n.velocity.y*n.mass/(this.mass+n.mass),i=n.velocity.y*(n.mass-this.mass)/(this.mass+n.mass)+2*this.velocity.y*this.mass/(this.mass+n.mass);this.velocity.y=L(t,e,l),n.velocity.y=L(t,i,l)}if(!h&&a)if(this.pos.x=n.pos.x+(o.x/2+s)*v(t.x-n.pos.x),n.mass){const t=(this.mass*this.velocity.x+n.mass*n.velocity.x)/(this.mass+n.mass),e=this.velocity.x*(this.mass-n.mass)/(this.mass+n.mass)+2*n.velocity.x*n.mass/(this.mass+n.mass),i=n.velocity.x*(n.mass-this.mass)/(this.mass+n.mass)+2*this.velocity.x*this.mass/(this.mass+n.mass);this.velocity.x=L(t,e,l),n.velocity.x=L(t,i,l)}else this.velocity.x*=-l}}if(this.collideTiles){const i=Vt(this.pos,this.size,this);if(i&&!Vt(t,this.size,this)){const s=Vt(G(t.x,this.pos.y),this.size,this),n=Vt(G(this.pos.x,t.y),this.size,this);if(n){const e=.001,i=.1,s=f(t.y-this.size.y/2+1)+this.size.y/2+e;if(s-this.pos.y<i&&!Vt(G(this.pos.x,s),this.size,this))return void(this.pos.y=s);this.pos.x=t.x,this.velocity.x*=-this.restitution}if(s||!n){const s=x(this.restitution,i.restitution);if(this.velocity.y*=-s,e){const e=1e-4,s=this.size.y/2+e;this.pos.y=ct.y<0?f(t.y-this.size.y/2)+s:g(t.y+this.size.y/2)-s,this.groundObject=i}else this.pos.y=t.y,this.groundObject=void 0}}}}update(){}render(){vt(this.pos,this.drawSize||this.size,this.tileInfo,this.color,this.angle,this.mirror,this.additiveColor)}destroy(){if(!this.destroyed){this.destroyed=1,this.parent&&this.parent.removeChild(this);for(const t of this.children)t.parent=0,t.destroy()}}localToWorld(t){return this.pos.add(t.rotate(this.angle))}worldToLocal(t){return t.subtract(this.pos).rotate(-this.angle)}localToWorldVector(t){return t.rotate(this.angle)}worldToLocalVector(t){return t.rotate(-this.angle)}collideWithTile(t,e){return t>0}collideWithObject(t){return!0}getUp(t=1){return G().setAngle(this.angle,t)}getRight(t=1){return G().setAngle(this.angle+d/2,t)}getAliveTime(){return n-this.spawnTime}getSpeed(){return this.velocity.length()}applyAcceleration(t){this.mass&&(this.velocity=this.velocity.add(t))}applyAngularAcceleration(t){this.mass&&(this.angleVelocity+=t)}applyForce(t){this.mass&&this.applyAcceleration(t.scale(1/this.mass))}getMirrorSign(){return this.mirror?-1:1}addChild(t,e=G(),i=0){!t.parent&&this.children.includes(t),this.children.push(t),t.parent=this,t.localPos=e.copy(),t.localAngle=i}removeChild(t){t.parent===this&&this.children.includes(t);const e=this.children.indexOf(t);e>=0&&this.children.splice(e,1),t.parent=0}isOverlappingObject(t){return this.isOverlapping(t.pos,t.size)}isOverlapping(t,e=G()){return z(this.pos,this.size,t,e)}setCollision(t=!0,e=!0,i=!0,s=!0){this.collideSolidObjects=t,this.isSolid=e,this.collideTiles=i,this.collideRaycast=s}toString(){}renderDebugInfo(){}}let yt,ft=G(),gt=[];function pt(t=new W,e=at,i=0,s=0){"number"==typeof e&&(e=new W(e,e));const n=new mt(new W,e,i,s),r=gt[i],o=e.x+2*s,h=e.y+2*s;if("number"==typeof t){const e=r.size.x/o|0,i=t%e,a=t/e|0;n.pos.set(i*o+s,a*h+s)}else n.pos.set(t.x*o+s,t.y*h+s);return n}class mt{constructor(t=G(),e=at,i=0,s=0,n=0){this.pos=t.copy(),this.size=e.copy(),this.textureIndex=i,this.padding=s,this.textureInfo=gt[this.textureIndex],this.bleedScale=n}offset(t){return new mt(this.pos.add(t),this.size,this.textureIndex,this.padding,this.bleedScale)}frame(t){return this.offset(new W(t*(this.size.x+2*this.padding),0))}setFullImage(t){return this.pos=new W,this.size=t.size.copy(),this.textureInfo=t,this.bleedScale=this.padding=0,this}}class xt{constructor(t,e=!0){this.image=t,this.size=t?G(t.width,t.height):G(),this.sizeInverse=t?G(1/t.width,1/t.height):G(),this.glTexture=void 0,e&&this.createWebGLTexture()}createWebGLTexture(){var t;t=this,le.add(t),Zt&&(t.glTexture?Te(t.glTexture,t.image):t.glTexture=we(t.image))}destroyWebGLTexture(){!function(t){le.delete(t);const e=t.glTexture;var i;t.glTexture=void 0,i=e,Zt&&Zt.deleteTexture(i)}(this)}hasWebGL(){return!!this.glTexture}}function vt(t,e=new W(1),i,s=X,n=0,r,o,h=ht,a,c){O(t),O(e),M(s),I(n),!o||M(o);const l=i&&i.textureInfo,u=i?i.bleedScale:0;if(h&&ht)if(a&&([t,e,n]=function(t,e,i=0){return[bt(t),e.scale(1/et),i+0]}(t,e,n)),l){const h=l.sizeInverse,a=i.pos.x*h.x,c=i.pos.y*h.y,d=i.size.x*h.x,y=i.size.y*h.y;if(function(t,e=!1){if(!Zt||t===ne)return;Ee(),ne=t,Zt.bindTexture(Zt.TEXTURE_2D,ne);const i=e?Zt.REPEAT:Zt.CLAMP_TO_EDGE;Zt.texParameteri(Zt.TEXTURE_2D,Zt.TEXTURE_WRAP_S,i),Zt.texParameteri(Zt.TEXTURE_2D,Zt.TEXTURE_WRAP_T,i)}(l.glTexture),u){const i=h.x*u,l=h.y*u;Se(t.x,t.y,r?-e.x:e.x,e.y,n,a+i,c+l,a-i+d,c-l+y,s.rgbaInt(),o&&o.rgbaInt())}else Se(t.x,t.y,r?-e.x:e.x,e.y,n,a,c,a+d,c+y,s.rgbaInt(),o&&o.rgbaInt())}else Se(t.x,t.y,e.x,e.y,n,0,0,0,0,0,s.rgbaInt());else++yt,function(t,e,i=0,s=!1,n,r=!1,o=J){O(t),O(e),I(i),r||([t,e,i]=function(t,e,i=0){return[wt(t),e.scale(et),i-0]}(t,e,i)),o.save(),o.translate(t.x+.5,t.y+.5),o.rotate(i),o.scale(s?-e.x:e.x,-e.y),n(o),o.restore()}(t,e=new W(e.x,-e.y),n,r,t=>{if(l){const e=i.pos.x,n=i.pos.y,r=i.size.x,h=i.size.y;!function(t,e,i,s,n,r,o,h,a,c,l,u,d=0){function y(t){return t.r>=1&&t.g>=1&&t.b>=1}const f=d,g=d,p=(n=x(1,0|n))-2*d,m=(r=x(1,0|r))-2*d;if(u?y(l.add(u))&&u.a<=0:y(l))t.globalAlpha=l.a,t.drawImage(e,i+f,s+g,p,m,o,h,a,c),t.globalAlpha=1;else{Z.width=n,Z.height=r,Q.drawImage(e,0|i,0|s,n,r,0,0,n,r);const d=Q.getImageData(0,0,n,r),y=d.data;if(!u||(v=u).r<=0&&v.g<=0&&v.b<=0&&v.a<=0){for(let t=0;t<y.length;t+=4)y[t]*=l.r,y[t+1]*=l.g,y[t+2]*=l.b;Q.putImageData(d,0,0),t.globalAlpha=l.a,t.drawImage(Z,f,g,p,m,o,h,a,c),t.globalAlpha=1}else{const e=[l.r,l.g,l.b,l.a],i=[255*u.r,255*u.g,255*u.b,255*u.a];for(let t=0;t<y.length;++t)y[t]=y[t]*e[3&t]+i[3&t]|0;Q.putImageData(d,0,0),t.drawImage(Z,f,g,p,m,o,h,a,c)}}var v}(t,l.image,e,n,r,h,-.5,-.5,1,1,s,o,u)}else{const e=o?s.add(o):s;t.fillStyle=e.toString(),t.fillRect(-.5,-.5,1,1)}},a,c)}function bt(t){let e=(t.x-ft.x/2+.5)/et,i=(t.y-ft.y/2+.5)/-et;return new W(e+tt.x,i+tt.y)}function wt(t){let e=t.x-tt.x,i=t.y-tt.y;return new W(e*et+ft.x/2-.5,i*-et+ft.y/2-.5)}let Tt=G(),Et=G(),St=G(),Rt=G(),At=0,Lt=!0,zt=!1,It=0;function Dt(){Ot.length=0,Ot[0]=[],Pt.length=0,Mt.length=0,Ft.length=0,Ut.length=0}function Ct(t,e=0){return D(t),!!(1&Ot[e]?.[t])}function _t(t,e=It){return I(t),I(e),Ct(t,e+1)}const Gt=void 0!==window.ontouchstart,Ot=[[]],Ft=[],Ut=[],Wt=[],Pt=(new Y,[]),Mt=[];function Bt(){Gt||document.hasFocus()||Dt(),Tt=bt(Et),St=function(t){let e=t.x/et,i=t.y/-et;return new W(e,i)}(Rt),function(){const t=t=>{const e=t=>t>.3?A(t,.3,.8):t<-.3?-A(-t,.3,.8):0;return G(e(t.x),e(-t.y)).clampLength()};if(!navigator||!navigator.getGamepads)return;if(!document.hasFocus())return;const e=navigator.getGamepads(),i=m(8,e.length);for(let s=0;s<i;++s){const i=e[s];if(!i){Ot[s+1]=void 0,Ft[s]=void 0,Ut[s]=void 0,Wt[s]=void 0;continue}const n=Ot[s+1]??(Ot[s+1]=[]),r=Ft[s]??(Ft[s]=[]),o=Ut[s]??(Ut[s]=G());for(let e=0;e<i.axes.length-1;e+=2)r[e>>1]=t(G(i.axes[e],i.axes[e+1]));let h=!1;for(let t=i.buttons.length;t--;){const e=i.buttons[t],r=_t(t,s);n[t]=e.pressed?r?1:3:r?4:0,e.pressed&&(!e.value||e.value>.9)&&(h=!0)}if(h&&(Wt[s]=!0,Wt[It]||(It=s),zt||=It===s),"standard"===i.mapping)o.set((_t(15,s)&&1)-(_t(14,s)&&1),(_t(12,s)&&1)-(_t(13,s)&&1));else if(i.axes&&i.axes.length>=2){const t=R(p(i.axes[0]),-1,1),e=R(p(i.axes[1]),-1,1);o.set(t,-e)}!o.isZero()&&(r[0]=o.clampLength())}}()}function Nt(){for(const t of Ot)for(const e in t)t[e]&=1;At=0,St=G(),Rt=G()}let Xt,jt=new AudioContext;function kt(){return"running"===jt.state}const Yt=[];function Vt(t,e=G(),i,s=!0){for(const n of Yt)if((!s||n.isSolid)&&n.collisionTest(t,e,i))return n}class Ht{constructor(t,e=0,i=!1,s=new N){this.tile=t,this.direction=e,this.mirror=i,this.color=s.copy()}clear(){this.tile=this.direction=0,this.mirror=!1,this.color=new N}}class $t extends dt{constructor(t,e,i=0,s=0,n=G(512)){O(n),super(t,e,void 0,i,X,s),this.canvas=new OffscreenCanvas(n.x,n.y),this.context=this.canvas?.getContext("2d"),this.textureInfo=new xt(this.canvas,!1),this.refreshWebGL=!1,this.mass=this.gravityScale=this.friction=this.restitution=0}destroy(){this.destroyed||(this.textureInfo.destroyWebGLTexture(),super.destroy())}render(){this.draw(this.pos,this.size,this.angle,this.color,this.mirror,this.additiveColor)}draw(t,e,i=0,s=X,n=!1,r,o=!1,h){const a=ht&&this.textureInfo.hasWebGL();a&&this.refreshWebGL&&(this.textureInfo.createWebGLTexture(),this.refreshWebGL=!1),vt(t,e,(new mt).setFullImage(this.textureInfo),s,i,n,r,a,o,h)}drawCanvas2D(t,e,i,s,n){if(!this.context)return;const r=this.context;r.save(),t=t.subtract(this.pos).multiply(this.tileInfo.size),e=e.multiply(this.tileInfo.size),r.translate(t.x,this.canvas.height-t.y),r.rotate(i),r.scale(s?-e.x:e.x,e.y),n(r),r.restore()}drawTile(t,e=G(1),i,s=new N,n,r){this.drawCanvas2D(t,e,n,r,t=>{const e=i&&i.textureInfo;e?(t.globalAlpha=s.a,t.drawImage(e.image,i.pos.x,i.pos.y,i.size.x,i.size.y,-.5,-.5,1,1),t.globalAlpha=1):(t.fillStyle=s.toString(),t.fillRect(-.5,-.5,1,1))})}drawRect(t,e,i,s){this.drawTile(t,e,void 0,i,s)}useWebGL(t=!0,e=!1){!e&&t&&this.textureInfo.hasWebGL()?this.refreshWebGL=!0:t?this.textureInfo.createWebGLTexture():this.textureInfo.destroyWebGLTexture()}}class qt extends $t{constructor(t,e,i=pt(),s=0){const n=i?e.multiply(i.size):e;super(t,e,0,s,n),this.tileInfo=i,this.data=[];for(let t=this.size.area();t--;)this.data.push(new Ht)}setData(t,e,i=!1){O(t),t.arrayCheck(this.size)&&(this.data[(0|t.y)*this.size.x+t.x|0]=e,i&&this.drawTileData(t))}getData(t){return O(t),t.arrayCheck(this.size)&&this.data[(0|t.y)*this.size.x+t.x|0]}render(){this.context,this.refreshWebGL&&(this.textureInfo.createWebGLTexture(),this.refreshWebGL=!1);const t=(new mt).setFullImage(this.textureInfo),e=this.drawSize||this.size,i=this.pos.add(e.scale(.5)),s=ht&&this.textureInfo.hasWebGL();vt(i,e,t,X,0,!1,k,s)}redraw(){this.redrawStart(!0);for(let t=this.size.x;t--;)for(let e=this.size.y;e--;)this.drawTileData(G(t,e),!1);this.redrawEnd(),this.useWebGL()}redrawStart(t=!1){if(!this.context)return;this.savedRenderSettings=[K,J,ft,tt,et],K=this.canvas,J=this.context,tt=this.size.scale(.5);const e=this.tileInfo?this.tileInfo.size:G(1);et=e.x,ft=this.size.multiply(e),t&&(K.width=ft.x,K.height=ft.y),this.context.imageSmoothingEnabled=!1,xe()}redrawEnd(){var t;this.context&&(this.context,t=J,ht&&Zt&&(Ee(),t.drawImage(Jt,0,0)),[K,J,ft,tt,et]=this.savedRenderSettings)}drawTileData(t,e=!0){if(!this.context)return;const i=this.tileInfo.size;if(e){const e=t.multiply(i);this.context.clearRect(e.x,this.canvas.height-e.y,i.x,-i.y)}const s=this.getData(t);if(void 0!==s.tile){this.context;const e=t.add(G(.5)),n=pt(s.tile,i,this.tileInfo.textureIndex,this.tileInfo.padding);vt(e,G(1),n,s.color,s.direction*d/2,s.mirror)}}}class Kt extends qt{constructor(t,e,i=pt(),s=0){super(t,e.floor(),i,s),this.collisionData=[],this.initCollision(this.size),Yt.push(this),this.isSolid=!0}destroy(){if(this.destroyed)return;const t=Yt.indexOf(this);t>=0&&Yt.splice(t,1),super.destroy()}initCollision(t){O(t),this.size=t.floor(),this.collisionData=[],this.collisionData.length=t.area(),this.collisionData.fill(0)}setCollisionData(t,e=1){O(t);const i=(0|t.y)*this.size.x+t.x|0;t.arrayCheck(this.size)&&(this.collisionData[i]=e)}getCollisionData(t){O(t);const e=(0|t.y)*this.size.x+t.x|0;return t.arrayCheck(this.size)?this.collisionData[e]:0}collisionTest(t,e=new W,i){O(t)&&O(e);const s=t.x-this.pos.x,n=t.y-this.pos.y,r=x(s-e.x/2|0,0),o=x(n-e.y/2|0,0),h=m(s+e.x/2,this.size.x),a=m(n+e.y/2,this.size.y),c=new W;for(let t=o;t<a;++t)for(let e=r;e<h;++e){const s=this.collisionData[t*this.size.x+e];if(s&&(!i||i.collideWithTile(s,c.set(e+this.pos.x,t+this.pos.y))))return!0}return!1}collisionRaycast(t,e,i,s){O(t)&&O(e);const n=new W,r=function(t,e,i,s){O(t),O(e),!s||O(s);const n=e.x-t.x,r=e.y-t.y,o=b(n,r);if(!o)return;const h=t.floor(),a=n/o,c=r/o,l=v(a),u=v(c),d=a?y(1/a):1/0,f=c?y(1/c):1/0,g=l>0?h.x+1:h.x,p=u>0?h.y+1:h.y;let m=0,x=a?(g-t.x)/a:1/0,w=c?(p-t.y)/c:1/0,T=d<f;for(;m<o;){if(i(h)){const e=G(t.x+a*m,t.y+c*m),i=1e-9;return T&&l<0&&(e.x-=i),u<0&&(e.y-=i),s&&(T?s.set(-l,0):s.set(0,-u)),e}(T=x<w)?(h.x+=l,m=x,x+=d):(h.y+=u,m=w,w+=f)}}(t,e,t=>{n.set(t.x-this.pos.x,t.y-this.pos.y);const e=this.getCollisionData(n);return e&&(!i||i.collideWithTile(e,t))},s);if(r)return r.floor().add(G(.5)),r}}let Jt,Zt,Qt,te,ee,ie,se,ne,re,oe,he,ae,ce,le,ue=!0;const de=5e5,ye=11,fe=4*ye,ge=de/fe|0,pe=3;function me(){if(!ee)return;Ee(),ee=!1,Zt.useProgram(Qt);let t=0;const e=(e,i,s,n)=>{const r=Zt.getAttribLocation(Qt,e),o=s&&fe,h=s&&1,a=1===s;Zt.enableVertexAttribArray(r),Zt.vertexAttribPointer(r,n,i,a,o,t),Zt.vertexAttribDivisor(r,h),t+=n*s};Zt.bindBuffer(Zt.ARRAY_BUFFER,oe),e("g",Zt.FLOAT,0,2),Zt.bindBuffer(Zt.ARRAY_BUFFER,re),Zt.bufferData(Zt.ARRAY_BUFFER,de,Zt.DYNAMIC_DRAW),e("p",Zt.FLOAT,4,4),e("u",Zt.FLOAT,4,4),e("c",Zt.UNSIGNED_BYTE,1,4),e("a",Zt.UNSIGNED_BYTE,1,4),e("r",Zt.FLOAT,4,1)}function xe(){if(!ht||!Zt)return;Zt&&(Jt.width=K.width,Jt.height=K.height,Zt.viewport(0,0,Jt.width,Jt.height),Zt.clear(Zt.COLOR_BUFFER_BIT));const t=G(2*et).divide(ft),e=tt.rotate(-0),i=G(-1).subtract(e.multiply(t)),s=T(0),n=w(0),r=[t.x*s,t.y*n,0,0,-t.x*n,t.y*s,0,0,1,1,1,0,i.x,i.y,0,1],o=(t,e,i)=>{Zt.useProgram(t);const s=Zt.getUniformLocation(t,e);Zt.uniformMatrix4fv(s,!1,i)};o(te,"m",r),o(Qt,"m",r),Zt.activeTexture(Zt.TEXTURE0),gt[0]&&(ne=gt[0].glTexture,Zt.bindTexture(Zt.TEXTURE_2D,ne)),ie=se=!1,ee=!0,me()}function ve(t,e){if(!Zt)return;const i=Zt.createShader(e);return Zt.shaderSource(i,t),Zt.compileShader(i),i}function be(t,e){if(!Zt)return;const i=Zt.createProgram();return Zt.attachShader(i,ve(t,Zt.VERTEX_SHADER)),Zt.attachShader(i,ve(e,Zt.FRAGMENT_SHADER)),Zt.linkProgram(i),i}function we(t){if(!Zt)return;const e=Zt.createTexture();let i=!1;if(t&&t.width)Te(e,t),Zt.bindTexture(Zt.TEXTURE_2D,e),i=!1;else{const t=new Uint8Array([255,255,255,255]);Zt.bindTexture(Zt.TEXTURE_2D,e),Zt.texImage2D(Zt.TEXTURE_2D,0,Zt.RGBA,1,1,0,Zt.RGBA,Zt.UNSIGNED_BYTE,t)}const s=Zt.NEAREST,n=i?Zt.LINEAR_MIPMAP_LINEAR:s;return Zt.texParameteri(Zt.TEXTURE_2D,Zt.TEXTURE_MAG_FILTER,s),Zt.texParameteri(Zt.TEXTURE_2D,Zt.TEXTURE_MIN_FILTER,n),i&&Zt.generateMipmap(Zt.TEXTURE_2D),Zt.bindTexture(Zt.TEXTURE_2D,ne),e}function Te(t,e){Zt&&(!!e&&e.width,Zt.bindTexture(Zt.TEXTURE_2D,t),Zt.texImage2D(Zt.TEXTURE_2D,0,Zt.RGBA,Zt.RGBA,Zt.UNSIGNED_BYTE,e),Zt.bindTexture(Zt.TEXTURE_2D,ne))}function Ee(){if(ht&&Zt&&ce){const t=se?Zt.ONE:Zt.ONE_MINUS_SRC_ALPHA;Zt.blendFuncSeparate(Zt.SRC_ALPHA,t,Zt.ONE,t),Zt.enable(Zt.BLEND);const e=ce*(ee?pe:ye);Zt.bufferSubData(Zt.ARRAY_BUFFER,0,he,0,e),ee?Zt.drawArrays(Zt.TRIANGLE_STRIP,0,ce):Zt.drawArraysInstanced(Zt.TRIANGLE_STRIP,0,4,ce),yt+=ce,ce=0}se=ie}function Se(t,e,i,s,n=0,r=0,o=0,h=1,a=1,c=-1,l=0){(ce>=ge||se!==ie)&&Ee(),me(),ee=!1;let u=ce++*ye;he[u++]=t,he[u++]=e,he[u++]=i,he[u++]=s,he[u++]=r,he[u++]=o,he[u++]=h,he[u++]=a,ae[u++]=c,ae[u++]=l,he[u++]=n}const Re=t.p+"ce9b0dbc6e7c8db58f9f.png";class Ae{constructor(t,e,i=G(2),s=G(0,0)){this.tileId=t,this.position=s,this.tileSize=e,this.scale=i}move(t){this.position=this.position.add(t)}render(t=this.scale){vt(this.position,t,pt(this.tileId,this.tileSize))}}const Le=[[1,1,1,1,1,1,1,1,1,1,1],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,1],[1,0,0,0,0,0,0,0,0,0,1],[1,1,1,1,1,1,1,1,1,1,1]],ze=["EMPTY","BASIC","START","END"];class Ie{constructor(t=ze[0],e=Le,i=8,s=G(11,9)){this.roomType=t,this.roomLayout=e,this.tileLayer=null,this.tileSize=i,this.size=s,this.center=null,this.init()}init(){this.buildTileLayer(),this.center=G(this.size.x/2,this.size.y/2)}buildTileLayer(){const t=G();this.tileLayer=new Kt(t,this.size,new mt(G(0),G(this.tileSize)));for(let t=0;t<this.roomLayout.length;t++)for(let e=0;e<this.roomLayout[t].length;e++){const i=this.roomLayout[t][e],s=G(e,t),n=i;let r;switch(i){case 0:r=5;break;case 1:r=637;break;default:r=0}const o=new Ht(r);this.tileLayer.setData(s,o),this.tileLayer.setCollisionData(s,n)}}}const De=[[0,1,0,0,0],[0,1,2,0,0],[0,0,1,0,0],[0,0,1,3,0]];class Ce{constructor(t=6,e=De){this.roomsCount=t,this.rooms=[],this.levelLayout=e,this.currentRoom=null,this.init()}init(){this.createRooms()}createRooms(){for(let t=0;t<this.levelLayout.length;t++)for(let e=0;e<this.levelLayout[t].length;e++){const i=this.levelLayout[t][e];if(0===i)continue;const s=new Ie(i);this.rooms.push({room:s,position:G(e,t)}),2==i&&(this.currentRoom=s)}}switchRoom(t){this.currentRoom=t,this.currentRoom.tileLayer.redraw()}}const _e=new class{constructor(t,e,i,s,n,r,o,h=6){this.width=t,this.height=e,this.tileSize=i,this.scale=s,this.tiles=n,this.tilesColumns=r,this.tilesRow=o,this.player=null,this.currentLevel=null,this.levelsCount=h,this.levels=[]}init(){var t;this.timer=new Y(.06),this.gameSize=G(this.width,this.height),t=this.gameSize,nt=t.copy(),function(t){st=t.copy()}(this.gameSize),this.size=G(this.width/this.tileSize,this.height/this.tileSize),this.center=G(this.size.x/2,this.size.y/2),ut(this.center),et=1*this.tileSize,this.player=new Ae(24,this.tileSize,this.scale,this.center),this.createLevels(),this.currentLevel.currentRoom.tileLayer.redraw(),this.player.position=this.currentLevel.currentRoom.center,ut(this.player.position)}update(){this.timer.elapsed()&&(this.handleInput(),this.timer.set(.06))}render(){this.player.render()}handleInput(){let t=function(t="ArrowUp",e="ArrowDown",i="ArrowLeft",s="ArrowRight"){D(t),D(e),D(i),D(s);const n=t=>Ct(t)?1:0;return G(n(s)-n(i),n(t)-n(e))}();(function(t){for(const e of Yt)if(t.arrayCheck(e.size))return e.getCollisionData(t);return 0})(this.player.position.add(t))||this.player.move(t)}checkCollision(t,e){}createLevels(){for(let t=0;t<this.levelsCount;t++){const t=new Ce;this.levels.push(t)}this.currentLevel=this.levels[0]}}(800,600,16,G(1,1),[Re],48,21);!async function(t,i,d,y,f,g=[],p=document.body){function x(t=0){let g=t-o;o=t;r+=g/1e3,h+=g,h=m(h,50);let p=!1;{let t=0;for(h<0&&h>-9&&(t=h,h=0);h>=0;h-=1e3/60)n=s++/60,p=!0,b(),Bt(),i(),a.forEach(t=>t.update?.()),c(),l(),d(),Nt(),u()&&v();h+=t}function v(){p||b(),ft=G(V.width,V.height),q.imageSmoothingEnabled=H.imageSmoothingEnabled=!1,xe(),y(),e.sort((t,e)=>t.renderOrder-e.renderOrder);for(const t of e)t.destroyed||t.render();f(),a.forEach(t=>t.render?.()),Ee(),yt=0}v(),requestAnimationFrame(x)}function b(){if(nt.x){V.width=nt.x,V.height=nt.y;const t=innerWidth/innerHeight,e=V.width/V.height;(Jt||V).style.width=V.style.width=$.style.width=t<e?"100%":"",(Jt||V).style.height=V.style.height=$.style.height=t<e?"":"100%"}else V.width=m(innerWidth,st.x),V.height=m(innerHeight,st.y);it.a>0&&(H.fillStyle=it.toString(),H.fillRect(0,0,ft.x,ft.y),H.fillStyle=j.toString()),$.width=V.width,$.height=V.height,ft=G(V.width,V.height),H.lineJoin=q.lineJoin="round",H.lineCap=q.lineCap="round"}async function w(){await t(),x()}var T;T=g,Array.isArray(T),t||=()=>{},i||=()=>{},d||=()=>{},y||=()=>{},f||=()=>{},p.style.cssText="margin:0;overflow:hidden;background:#000;user-select:none;-webkit-user-select:none;touch-action:none;-webkit-touch-callout:none",K=V=document.createElement("canvas"),p.appendChild(V),J=H=V.getContext("2d"),function(){function t(t){return"KeyW"===t?"ArrowUp":"KeyS"===t?"ArrowDown":"KeyA"===t?"ArrowLeft":"KeyD"===t?"ArrowRight":t}function e(t){const e=V.getBoundingClientRect(),i=A(t.x,e.left,e.right),s=A(t.y,e.top,e.bottom);return G(i*V.width,s*V.height)}document.addEventListener("keydown",function(e){e.repeat||(zt=!1,Ot[0][e.code]=3,Ot[0][t(e.code)]=3),["ArrowUp","ArrowDown","ArrowLeft","ArrowRight","Space","Tab","Backspace"].includes(e.code)&&document.hasFocus()&&e.cancelable&&e.preventDefault()}),document.addEventListener("keyup",function(e){Ot[0][e.code]=2&Ot[0][e.code]|4,Ot[0][t(e.code)]=4}),document.addEventListener("mousedown",function(t){if(Gt)return;jt&&!kt()&&jt.resume(),zt=!1,Ot[0][t.button]=3;const i=Et;Et=e(G(t.x,t.y)),Rt=Rt.add(Et.subtract(i)),document.hasFocus()&&t.cancelable&&t.preventDefault()}),document.addEventListener("mouseup",function(t){Gt||(Ot[0][t.button]=2&Ot[0][t.button]|4)}),document.addEventListener("mousemove",function(t){Lt=!0;const i=Et;Et=e(G(t.x,t.y));const s=document.pointerLockElement===V?G(t.movementX,t.movementY):Et.subtract(i);Rt=Rt.add(s)}),document.addEventListener("mouseleave",function(){Lt=!1}),document.addEventListener("wheel",function(t){At=t.ctrlKey?0:v(t.deltaY)}),document.addEventListener("contextmenu",function(t){t.preventDefault()}),document.addEventListener("blur",function(){Dt()}),Gt&&function(){let t;function i(i){jt&&!kt()&&jt.resume();const s=i.touches.length;if(s){const s=G(i.touches[0].clientX,i.touches[0].clientY),n=Et;Et=e(s),t?(Rt=Rt.add(Et.subtract(n)),zt=lt):Ot[0][0]=3}else t&&(Ot[0][0]=2&Ot[0][0]|4);return t=s,document.hasFocus()&&i.cancelable&&i.preventDefault(),!0}document.addEventListener("touchstart",t=>i(t),{passive:!1}),document.addEventListener("touchmove",t=>i(t),{passive:!1}),document.addEventListener("touchend",t=>i(t),{passive:!1})}()}(),Xt=jt.createGain(),Xt.connect(jt.destination),Xt.gain.value=.3,function(){if(le=new Set,!ht)return void(ue=!1);if(Jt=document.createElement("canvas"),Zt=Jt.getContext("webgl2",{antialias:true}),!Zt)return console.warn("WebGL2 not supported, falling back to 2D canvas rendering!"),Jt=Zt=void 0,ht=!1,void(ue=!1);function t(){Qt=be("#version 300 es\nprecision highp float;uniform mat4 m;in vec2 g;in vec4 p,u,c,a;in float r;out vec2 v;out vec4 d,e;void main(){vec2 s=(g-.5)*p.zw;gl_Position=m*vec4(p.xy+s*cos(r)-vec2(-s.y,s)*sin(r),1,1);v=mix(u.xw,u.zy,g);d=c;e=a;}","#version 300 es\nprecision highp float;uniform sampler2D s;in vec2 v;in vec4 d,e;out vec4 c;void main(){c=texture(s,v)*d+e;}"),te=be("#version 300 es\nprecision highp float;uniform mat4 m;in vec2 p;in vec4 c;out vec4 d;void main(){gl_Position=m*vec4(p,1,1);d=c;}","#version 300 es\nprecision highp float;in vec4 d;out vec4 c;void main(){c=d;}");const t=new ArrayBuffer(de);he=new Float32Array(t),ae=new Uint32Array(t),re=Zt.createBuffer(),oe=Zt.createBuffer();const e=new Float32Array([ce=0,0,1,0,0,1,1,1]);Zt.bindBuffer(Zt.ARRAY_BUFFER,oe),Zt.bufferData(Zt.ARRAY_BUFFER,e,Zt.STATIC_DRAW)}V.parentElement.appendChild(Jt),t(),Jt.addEventListener("webglcontextlost",t=>{ht=!1,Jt.style.display="none",t.preventDefault();for(const t of le)t.glTexture=void 0;ne=void 0,a.forEach(t=>t.glContextLost?.())}),Jt.addEventListener("webglcontextrestored",()=>{ht=!0,Jt.style.display="",t();for(const t of le)t.glTexture=we(t.image);a.forEach(t=>t.glContextRestored?.())})}(),$=document.createElement("canvas"),p.appendChild($),q=$.getContext("2d");const E="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%)";var S;V.style.cssText=$.style.cssText=E,Jt&&(Jt.style.cssText=E),function(t){rt=t,V&&(V.style.imageRendering=t?"pixelated":""),Jt&&(Jt.style.imageRendering=t?"pixelated":"")}(rt),ot=S=ot,$&&($.style.imageRendering=S?"pixelated":""),b(),xe(),Z=new OffscreenCanvas(256,256),Q=Z.getContext("2d",{willReadFrequently:!0});const R=g.map((t,e)=>new Promise(i=>{D(t);const s=new Image;s.onerror=s.onload=()=>{const t=new xt(s);gt[e]=t,i()},s.crossOrigin="anonymous",s.src=t}));g.length||R.push(new Promise(t=>{const e=new xt(new Image);gt[0]=e,t()})),await Promise.all(R),w()}(function(){_e.init()},function(){_e.update()},function(){},function(){_e.render()},function(){},_e.tiles)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,